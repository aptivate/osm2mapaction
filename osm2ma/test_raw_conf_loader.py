# This file was originally generated by PyScripter's unitest wizard

import unittest
import os
import sys
import xlrd
from configengine import xwalk_from_raw_config
from raw_config_loader import RawConfig
import fixtures

@unittest.skip("not implenemted")
class TestRawConfig(unittest.TestCase):
    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_is_column_names_valid(self):
        pass

    def test_is_column_count_valid(self):
        pass

    @unittest.skip("not implenemted")
    def test_is_row_count_valid(self):
        pass

@unittest.skip("not implenemted")
class TestGlobalFunctions(unittest.TestCase):
    pass


class TestRawConfigIterator(unittest.TestCase):

    def setUp(self):
        test_script_path = os.path.abspath(os.path.dirname(sys.argv[0]))
        excel_path = os.path.join(test_script_path, r"testfiles", r"fixtures.xls")
        workbook = xlrd.open_workbook(os.path.realpath(excel_path))
        self.rawconf_good = workbook.name_map.get("rawconf_good")[0].area2d(clipped=True)
        self.rawconf_invalid_heirarchy = workbook.name_map.get("rawconf_invalid_heirarchy")[0].area2d(clipped=True)
        self.rawconf_too_few_columns = workbook.name_map.get("rawconf_too_few_columns")[0].area2d(clipped=True)
        self.rawconf_wrong_column_names = workbook.name_map.get("rawconf_wrong_column_names")[0].area2d(clipped=True)

    def tearDown(self):
        pass

    @unittest.skip("not implenemted")
    def test_xwalk_from_raw_config(self):
        # print self.rawconf_good
        result = xwalk_from_raw_config(self.rawconf_good, "wrl", "su")
        # print result
        assert False

    @unittest.skip("not implenemted")
    def test_is_table_schema_raw_config(self):
        mysheet, rowxlo, rowxhi, colxlo, colxhi = self.rawconf_good
        self.assertTrue(RawConfig.is_table_schema_raw_config(self.rawconf_good), "Raw Config table schema OK")
        self.assertFalse(RawConfig.is_table_schema_raw_config(self.rawconf_too_few_columns),
                         "Raw Config table; too few columns")
        self.assertFalse(RawConfig.is_table_schema_raw_config(self.rawconf_wrong_column_names),
                         "Raw Config table; wrong column names")

    def test_raw_config_columns_count_valid(self):
        mysheet, rowxlo, rowxhi, colxlo, colxhi = self.rawconf_good
        self.assertTrue(RawConfig._raw_config_columns_count_valid(self.rawconf_good),
                        "Raw config column count for rawconf_good fixture")
        self.assertRaises(UserWarning, RawConfig._raw_config_columns_count_valid, self.rawconf_too_few_columns)
        # "Raw config column count for rawconf_too_few_columns fixture")

    def test_raw_config_columns_names_valid(self):
        self.assertEqual(RawConfig._raw_config_columns_names_valid(self.rawconf_good), fixtures.rawconf_col_names,
                         "Raw Config column names for rawconf_good fixture")
        self.assertRaises(RawConfig._raw_config_columns_names_valid(self.rawconf_wrong_column_names),
                          "Raw Config column names for rawconf_wrong_column_names fixture")

    @unittest.skip("not implemented")
    def test_is_raw_config_heirarchy_compliant(self):
        pass


def runtests():
    # unittest.main()
    TestGlobalFunctions().run()
    TestRawConfig().run()
    TestRawConfigIterator().run()

if __name__ == '__main__':
    runtests()
    # from pprint import pprint
    # stream = StringIO()
    # runner = unittest.TextTestRunner(stream=stream)
    # result = runner.run(unittest.makeSuite(MyTestCase))
    # print 'Tests run ', result.testsRun
    # print 'Errors ', result.errors
    # pprint(result.failures)
    # stream.seek(0)
    # print 'Test output\n', stream.read()