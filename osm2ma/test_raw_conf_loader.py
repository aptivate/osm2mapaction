# This file was originally generated by PyScripter's unitest wizard

import unittest
from configengine import xwalk_from_raw_config


class TestRawConfig(unittest.TestCase):
    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_is_column_names_valid(self):
        pass

    def test_is_column_count_valid(self):
        pass

    @unittest.skip("not implenemted")
    def test_is_row_count_valid(self):
        pass


class TestGlobalFunctions(unittest.TestCase):
    pass


class TestRawConfigIterator(unittest.TestCase):

    def setUp(self):
        excel_path = r"D:\work\custom-software-group\code\github\osm2mapaction\osm2ma\testfiles\fixtures.xls"
        workbook = xlrd.open_workbook(os.path.realpath(excel_path))
        self.rawconf_good = workbook.name_map.get("rawconf_good")[0].area2d(clipped=True)
        self.rawconf_invalid_heirarchy = workbook.name_map.get("rawconf_invalid_heirarchy")[0].area2d(clipped=True)
        self.rawconf_too_few_columns = workbook.name_map.get("rawconf_too_few_columns")[0].area2d(clipped=True)
        self.rawconf_wrong_column_names = workbook.name_map.get("rawconf_wrong_column_names")[0].area2d(clipped=True)

    def tearDown(self):
        pass

    def test_xwalk_from_raw_config(self):
        print self.rawconf_good
        result = xwalk_from_raw_config(self.rawconf_good, "wrl", "su")
        print result
        assert False

    def test_is_table_schema_raw_config(self):
        mysheet, rowxlo, rowxhi, colxlo, colxhi = self.rawconf_good
        self.assertTrue(is_table_schema_raw_config(self.rawconf_good), "Raw Config table schema OK")
        self.assertFalse(is_table_schema_raw_config(self.rawconf_too_few_columns), "Raw Config table; too few columns")
        self.assertFalse(is_table_schema_raw_config(self.rawconf_wrong_column_names),
                         "Raw Config table; wrong column names")

    def test_raw_config_columns_count_valid(self):
        mysheet, rowxlo, rowxhi, colxlo, colxhi = self.rawconf_good
        self.assertTrue(raw_config_columns_count_valid(self.rawconf_good), "Raw Config table schema OK")
        self.assertFalse(raw_config_columns_count_valid(self.rawconf_too_few_columns), "Raw Config table schema OK")

    def test_raw_config_columns_names_valid(self):
        self.assertTrue(raw_config_columns_names_valid(self.rawconf_good), "Raw Config table schema OK")
        self.assertFalse(raw_config_columns_names_valid(self.rawconf_wrong_column_names),
                         "Raw Config table; wrong column names")

    @unittest.skip("not implemented")
    def test_is_raw_config_heirarchy_compliant(self):
        pass


if __name__ == '__main__':
    unittest.main()
